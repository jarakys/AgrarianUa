// <auto-generated />
using System;
using AgrarianUa.AgrarianDbContextPath;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AgrarianUa.Migrations
{
    [DbContext(typeof(AgrarianDbContextPath.AgrarianDbContext))]
    [Migration("20201216220129_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Core.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Core.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("SettingsId")
                        .HasColumnType("int");

                    b.Property<int?>("SettingsId1")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SettingsId");

                    b.HasIndex("SettingsId1");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Core.Models.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AirHumidity")
                        .HasColumnType("text");

                    b.Property<bool>("AutoLighting")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AutoVentilation")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Autowatering")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<string>("SoilTemperature")
                        .HasColumnType("text");

                    b.Property<string>("Temperature")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Core.Models.Device", b =>
                {
                    b.HasOne("Core.Models.Location", "Location")
                        .WithMany("Devices")
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("Core.Models.Schedule", b =>
                {
                    b.HasOne("Core.Models.Settings", null)
                        .WithMany("LightingSchedules")
                        .HasForeignKey("SettingsId");

                    b.HasOne("Core.Models.Settings", null)
                        .WithMany("WateringSchedules")
                        .HasForeignKey("SettingsId1");
                });

            modelBuilder.Entity("Core.Models.Settings", b =>
                {
                    b.HasOne("Core.Models.Device", "Device")
                        .WithOne("Settings")
                        .HasForeignKey("Core.Models.Settings", "DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
